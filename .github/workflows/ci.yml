name: GitHub CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  linux:
    runs-on: ubuntu-22.04
    
    env:
      GCC_VER: 13
      CLANG_VER: 18
      
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
        
    steps:
      - name: Checkout repository from github
        uses: actions/checkout@v4

      - name: Install gcc-${{ env.GCC_VER }}
        if:  matrix.compiler == 'gcc'
        run: |
          sudo apt-get install -y gcc-${{ env.GCC_VER }} g++-${{ env.GCC_VER }}

          echo "CONAN_PROFILE=gcc-${{ env.GCC_VER }}" >> $GITHUB_ENV

      - name: Install clang-${{ env.CLANG_VER }}
        if: matrix.compiler == 'clang'
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          . /etc/lsb-release
          sudo add-apt-repository -y "deb http://apt.llvm.org/${DISTRIB_CODENAME}/ llvm-toolchain-${DISTRIB_CODENAME}-${{ env.CLANG_VER }} main"
          sudo apt-get install -y clang-${{ env.CLANG_VER }} llvm-${{ env.CLANG_VER }}

          echo "CONAN_PROFILE=clang-${{ env.CLANG_VER }}" >> $GITHUB_ENV
      - name: Install Conan
        uses: turtlebrowser/get-conan@v1.2
        with:
          version: 2.2.1

      - name: Install system dependencies
        run: |
          sudo apt-get install -y libegl-dev 
          sudo apt-get install -y libx11-dev libx11-xcb-dev libfontenc-dev libxaw7-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxfixes-dev libxi-dev libxinerama-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev libxres-dev libxss-dev libxtst-dev libxv-dev libxxf86vm-dev libxcb-glx0-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev libxcb-dri3-dev libxcb-cursor-dev libxcb-dri2-0-dev libxcb-dri3-dev libxcb-present-dev libxcb-composite0-dev libxcb-ewmh-dev libxcb-res0-dev libxcb-util-dev

      - name: Install Vulkan SDK        
        run: |
          wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-${DISTRIB_CODENAME}.list http://packages.lunarg.com/vulkan/lunarg-vulkan-${DISTRIB_CODENAME}.list
          sudo apt update
          sudo apt install vulkan-sdk

      - name: Fetch dependencies
        run: |
          conan profile detect --force
          conan install . --profile=conan/${{ env.CONAN_PROFILE }} --profile conan/opt/linux-hardening --profile conan/dependencies --build=* --settings build_type=Release

      - name: Configure CMake
        run: |
          cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON --preset release

      - name: Build
        run: |
          cmake --build --preset=release
      
      - name: Test
        run: |
          ctest --preset release

  windows:
    runs-on: windows-2022

    env:
      CONAN_PROFILE: msvc-2022

    strategy:
      fail-fast: false

    steps:
      - name: Initialize
        run: |
          git config --global core.autocrlf input
          
      - name: Checkout repository from github
        uses: actions/checkout@v4

      - name: Install Conan
        uses: turtlebrowser/get-conan@v1.2
        with:
          version: 2.2.1

      - name: Cache Vulkan SDK
        id: cache-vulkan-sdk
        uses: actions/cache@v4
        with:
          path: "C:\\VulkanSDK\\1.3.280.0"
          key: vulkan-sdk-1.3.280.0

      - name: Setup Vulkan
        if: steps.cache-vulkan-sdk.outputs.cache-hit != 'true'
        run: |
            Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/1.3.280.0/windows/VulkanSDK-1.3.280.0-Installer.exe" -OutFile VulkanSDK.exe
            $installer = Start-Process -FilePath VulkanSDK.exe -Wait -PassThru -ArgumentList @("/S");
            $installer.WaitForExit();

      - name: Fetch dependencies
        run: |
          conan profile detect --force
          conan install . --profile=conan/${{ env.CONAN_PROFILE }} --profile=conan/opt/msvc-hardening --build=* --settings build_type=Release

      - name: Configure CMake
        run: |
          cmake --preset default
          
      - name: Build
        run: |
          cmake --build --preset=multi-release

      - name: Test
        run: |
          ctest --preset multi-release

